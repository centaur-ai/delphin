# PWL Transformation and Scoping Specification

## Variable Scoping Rules

### Core Principles
### Variable Scoping Rules
1. Each variable must be properly introduced by appropriate scoping
2. A variable's scope extends from its introduction to the end of its scope
3. No variable can be referenced before its introduction
4. The scope of each variable must be the minimum required while preserving all required access
5. Independent variables can be scoped in parallel when their predicates don't interact
6. Inner scopes have access to all variables from their enclosing scopes
7. Event and individual variables should be introduced in groups based on their mutual dependencies:
   - Variables that form part of the same predicate or connected chain of predicates should be introduced together
   - Each variable group should be introduced at the scope where all their related variables are available
8. If an event variable appears multiple times in the input, each instance must be introduced in the appropriate part of the minimum scoping. However, the scoping process itself must not introduce additional copies of event variables
9. The scoping process must not introduce duplicate predicates. However, if predicates are duplicated in the input, those duplicates should be preserved in their appropriate scopes

### Quantifier Types and Scoping  
1. There are three classes of quantifiers that must be handled distinctly:
   - Universal quantifiers (every_q)
   - Definite quantifiers (the_q, def_explicit_q) 
   - Indefinite quantifiers (proper_q, udef_q, etc.)
2. Quantifier scope ordering from outer to inner:
   Example: ?[x]:(/* proper_q */ ?[y]:(/* the_q */ ![z](/* every_q */ ...)))
3. Both scope patterns between universal quantifiers and negation must be preserved as they appear in the input:
   - neg(every_q(...))
   - every_q(neg(...))
4. For predicates with multiple variable dependencies:
   - Each predicate should be placed at the innermost scope where all its required variables are available
   - Predicates that only depend on variables from outer scopes can be moved outward to that scope
   - A predicate that connects variables from different scopes must remain at the innermost scope where all its variables are available
5. Definite quantifiers serialize to set/predicate forms. Specifically:

   a. the_q transforms from:
   ```
   the_q(X, A(X), B(X))
   ```
   to
   ```
   ?[S]:(/* the_q */
     S=^[s]:(
       A(s)) &
     size(S)=1 &
     ?[X]:(
       S(X) & B(X)))
   ```

   b. Conjunctions of x-type variables transform from:
   ```
   and_c(x14, x19, x24)        [where x14=ARG0, x19=ARG1, x24=ARG2, if x19 and x24 are not e-type variables]
   ```
   to
   ```
   ?[x14]:(/* and_c */
     x14=^[x]:(
       x=x19 | x=x24))
   ```

   c. Implicit conjunctions of x-type variables transform from:
   ```
   implicit_conj(x3, x8, x14)   [where x3=ARG0, x8=ARG1, x14=ARG2, if x8 and x14 are not e-type variables]
   ```
   to
   ```
   ?[x3]:(/* implicit_conj */
     x3=^[x]:(
       x=x8 | x=x14))
   ```

   d. Conjunctions of e-type variables
   ```
   and_c(e0,e1,e2) [where e0=ARG0, e1=ARG1, e2=ARG2, if e0 and e1 are not x-type variables]
   ```
   to
   [nothing -- please delete these]

6. Indefinite quantifiers serialize to standard existential quantification (?[var])

### Variable Scoping Rules
1. Each variable must be properly introduced by appropriate scoping
2. A variable's scope extends from its introduction to the end of its scope
3. No variable can be referenced before its introduction
4. The scope of each variable must be the minimum required while preserving all required access
5. Independent variables can be scoped in parallel when their predicates don't interact
6. Inner scopes have access to all variables from their enclosing scopes
7. Event and individual variables should be introduced in groups based on their mutual dependencies:
   - Variables that form part of the same predicate or connected chain of predicates should be introduced together
   - Each variable group should be introduced at the scope where all their related variables are available

### Formatting Rules
1. Each new scope is introduced with:
   - ?[var]: for existential quantification
   - ![var]: for universal quantification
2. Each scope increases indentation by two spaces
3. After each scope opener, a comment indicating the quantifier type should appear in the format /* quantifier_name */
4. Predicates within a scope should align with that scope's indentation level
5. Closing parentheses should align with their opening scope level

### Example
The following example demonstrates the application of these scoping rules:
```
?[x38]:(/* proper_q */
  ?[n]:(name(n) & arg1(n)=x38 & arg2(n)="Dreadbury Mansion") &
  ?[x8]:(/* proper_q */
    ?[n]:(name(n) & arg1(n)=x8 & arg2(n)="Agatha") &
    ?[x24]:(/* proper_q */
      ?[n]:(name(n) & arg1(n)=x24 & arg2(n)="Charles") &
      ?[x14]:(/* udef_q */
        ?[x3]:(/* udef_q */
          (implicit_conj(x3) & arg1(x3)=x8 & arg2(x3)=x14) &
          ?[e30,e31]:(
            (_live_v_1(e30) & arg1(e30)=x3) &
            (_in_p_loc(e31) & arg1(e31)=e30 & arg2(e31)=x38)) &
          ?[x19]:(/* udef_q */
            _butler_n_1(x19) &
            (_and_c(x14) & arg1(x14)=x19 & arg2(x14)=x24) &
            ?[x46]:(/* the_q */ 
              ?[e53,e54]:(
                (_live_v_1(e53) & arg1(e53)=x46) &
                (_therein_p_dir(e54) & arg1(e54)=e53)) &
              ?[e51]:(_only_a_1(e51) & arg1(e51)=x46) &
              ?[e2,e45]:(
                (_and_c(e2) & arg1(e2)=e30 & arg2(e2)=e45) &
                (_be_v_id(e45) & arg1(e45)=x3 & arg2(e45)=x46)) &
              (_people_n_of(x46) & arg1(x46)=i52)))))))
```

This example shows:
- Each variable is properly introduced and scoped
- Named predicates appear immediately after their variable introductions
- Event variables like (e30,e31), (e53,e54) are grouped based on their interdependencies
- Predicates appear at the minimum scope where all their required variables are available
- Complex predicates appear at the scope where all their required variables are available
- Proper indentation shows scope nesting
- Each quantifier has appropriate /* quantifier_name */ annotation

## Transformation Pipeline

### Phase 0
Should filter out any event-type and_c predicates:
1. Remove predicates matching and_c(e0,e1,e2) [where e0=ARG0, e1=ARG1, e2=ARG2] when all arguments are e-type variables
2. Pass through all other predicates unchanged

### Phase 1
Should look for:
1. proper_q(X1,..,A) 
2. proper_q(X2,..,B)
3. named(X1,s1)
4. named(X2,s2)  
5. compound(e,X1,X2)

And record this patterns as.
```
temp_compound_name(X1,X2,A,B,s)

where s = s1 + " " + s2)
```

### Phase 2
Should rewrite..

  named(X1,s1) -> named(X1,s)
  named(X2,s2) -> X2 = X1.
  
..and it should drop the compound predicate.

Meanwhile, phase 2 will convert the predicates into a Formula structure that must capture the variable bindings, argument dependencies, and combined name string in a form that phase 3 can serialize appropriately.

### Phase 3 
Phase 3 simplifies negation scopes:
1. Identify Formula.scope nodes with "neg" or "never_a_1" quantifiers
2. Check if the event variable in scope is actually used in the inner formula
3. For unused event variables, remove the scope while preserving the negation operation 
4. Process nested formulas recursively

For example:
 ~?[e1]:(/* neg */ inner)     ; when e1 is not used in inner transforms to:
 ~?[]:(/* neg */ inner)       ; scope removed but negation preserved 
 ~inner                       ; (not done by Phase 5, but by Phase 6 serialization)

### Phase 4
Phase 4 serializes to PWL format as follows:

A named predicate like:
```
named(X1,"London")
```
will be serialized into:
```
?[n]:(name(n) & arg1(n)=X1 & arg2(n)="London")
```

For non-quantifier predicates:

pred(x)
pred(x,b)
pred(x,b,c)

..should be rewritten as..

pred(x)
(pred(x) & arg1(x)=b)
(pred(x) & arg1(x)=b & arg2(x)=c)

..and so on.

It can also be the case that the first set could have the form...

pred(x)
pred(b,x)
pred(b,c,x) or pred(b,x,c) 

..and the same output would occur. In other words, ordering still matters for arg1/arg2/.. but only for the non-x variables.

"x" is used as the first argument because it is important that the first variable listed be the first "x" variable in the argument list of pred.
This may require some filtering for some predicates.

## Negation

Negation has several forms:

never_a_1(context,predicate)
neg(context,predicate)

The context argument (typically an "i" or "e" variable name) will be used as a scoping variable instead of an "x" variable.
Negation will be immune from re-scoping as mentioned above. It can be thought as a barrier.

## Other higher-order forms

colon_p_namely(e,h1,h2)

Here "e" is used a scoping variable, and the handles like any other quantifier or negation will be expanded.
