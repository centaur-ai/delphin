# PWL Transformation and Scoping Specification

## Variable Scoping Rules

### Core Principles
1. Only variables of type 'x' (entities) should be introduced with ?[var]
2. Events ('e'), individuals ('i') and handles ('h') should NOT be scoped with ?[var]
3. An 'x' variable can only be referenced within an enclosing scope that introduces it 
4. Each entity variable's scope must be minimal while preserving access
5. Independent entity variables can have parallel scopes
6. Variables in inner scopes automatically have access to all variables from lexically enclosing scopes

### Quantifier Types and Scoping  
1. There are three classes of quantifiers that must be handled distinctly:
   - Universal quantifiers (every_q)
   - Definite quantifiers (the_q, def_explicit_q) 
   - Indefinite quantifiers (proper_q, udef_q, etc.)
2. Quantifier scope ordering from outer to inner:
   - Indefinite quantifiers (proper_q, udef_q, etc.)
   - Definite quantifiers (the_q, def_explicit_q)
   - Universal quantifiers (every_q)
   Example: ?[x](/* indefinite */ ?[S]:(/* definite */ ![y](/* universal */ ...)))
3. Both scope patterns between universal quantifiers and negation must be preserved as they appear in the input:
   - neg(every_q(...))
   - every_q(neg(...))
4. Definite quantifiers serialize to set/predicate forms. Specifically, the_q transforms from:

```
the_q(X, A(X), B)
```

to

```
?[S]:(S=^[s]:A(s) & size(S)=1 & S(x) & B) 
```
5. Indefinite quantifiers serialize to standard existential quantification (?[var])

## Transformation Pipeline

### Phase 1
Should look for:
1. proper_q(X1,..,A) 
2. proper_q(X2,..,B)
3. named(X1,s1)
4. named(X2,s2)
5. compound(e,X1,X2)

And rewrite this into:
```
temp_compound_name(X1,X2,A,B,s)
```

### Phase 2
Should rewrite:
```
temp_compound_name(X1,X2,A,B,s)
```
into a Formula structure that represents an equivalent logical form to:
```
proper_q(X1,named(X1,s1),A & B, carg=s1 + " " + s2)
```
The Formula structure must capture the variable bindings, argument dependencies, and combined name string in a form that phase 3 can serialize appropriately.

The data structure that represents predicates (EP) has a slot called CARG for named's string.
Use this slot for storing the combined string. In this way, no new predicates need to be generated and the handle map can 
remain fixed.

### Phase 3
Phase 3 converts X2 to X1, eliminating it from all predicates.

### Phase 4
Phase 4 performs minimum scoping, described above.

### Phase 5
Phase 5 serializes as below.

A named predicate like:
```
named(X1,"London")
```

will be serialized into:

```
(named(X1) & arg1(X1)="London")
```

Respectively for non-quantifier predicates:

pred(x)
pred(x,b)
pred(x,b,c)

..should be rewritten as..

pred(x)
(pred(x) & arg1(x)=b)
(pred(x) & arg1(x)=b & arg2(x)=c)

..and so on.

It can also be the case that the first set could have the form...

pred(x)
pred(b,x)
pred(b,c,x) or pred(b,x,c) 

..and the same output would occur. In other words, ordering still matters for arg1/arg2/.. but only for the non-x variables.

"x" is used as the first argument because it is important that the first variable listed be the first "x" variable in the argument list of pred.
This may require some filtering for some predicates.
